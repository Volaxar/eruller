# coding=utf-8import pickleimport reimport threadingimport timeimport glimport mainimport xmppclass Ja():    def __init__(self):        self.ja_online = False                login = 'ruller@172.20.0.3/Ruller'                password = ''        server = '172.20.0.3'        port = '5222'                to_list = ['admin', 'control'] + [x['login'] for x in gl.bots.values()]                self.contact_list = {}                try:            self.jid = xmpp.protocol.JID(login)                        self.ja_client = xmpp.Client(self.jid.getDomain(), debug=[])                        if self.ja_client.connect(server=(server, port), secure=0):                xmpp.features.register(self.ja_client, self.jid.getDomain(),                                       {'username': self.jid.getNode(), 'password': password,                                        'name': self.jid.getNode()})                self.ja_client.auth(user=self.jid.getNode(), password=password, resource=self.jid.getResource())                                self.ja_client.RegisterHandler('message', self.OnMessage)                self.ja_client.RegisterHandler('presence', self.OnPresence)                                self.ja_client.sendInitPresence(requestRoster=1)                                self.ja_online = True                                for _bot in to_list:                    jid = '{}@172.20.0.3'.format(_bot)                                        self.ja_client.send(xmpp.Presence(to=jid, typ='subscribe'))                    self.ja_client.send(xmpp.Presence(to=jid, typ='available'))                                t = threading.Thread(target=self.ja_process)                t.daemon = True                t.start()                except Exception as e:            print 'except in ja.__init__: {}'.format(e)        # отправка сообщений    def ja_send(self, to, msg):        try:            self.ja_client.send(xmpp.protocol.Message(to, msg))        except Exception as e:            print 'except in ja.ja_send: {}'.format(e)                        self.ja_close()        # Закрытие джа клиента    def ja_close(self):        if self.ja_online:            try:                                if hasattr(self.ja_client, 'UnregisterHandler'):                    self.ja_client.UnregisterHandler('message', self.OnMessage)                    self.ja_client.UnregisterHandler('presence', self.OnPresence)                                        self.ja_client.disconnect()                        except Exception as e:                print 'except in ja.ja_close: {}'.format(e)            finally:                self.ja_online = 0                self.ja_client = None        # Рабочий процесс джа клиента    def ja_process(self):                while self.ja_online:            try:                if not hasattr(self.ja_client, 'Process'):                    self.ja_close()                                        return                                self.ja_client.Process()            except Exception as e:                print 'except in ja.ja_process: {}'.format(e)                self.ja_close()                        time.sleep(0.1)        # Обработчик входящих сообщений    def OnMessage(self, con, msg):        try:            if msg.getBody():                _pr = msg.getBody()[0]                                pre = re.compile(r'^\d{3}$')                                if _pr == '?':                    s = pickle.loads(msg.getBody()[1:].encode('utf-8'))                                        if isinstance(s, dict):                        func = getattr(main, s['type'], None)                                                if func:                            threading.Thread(target=func, args=(msg.getFrom().getNode(), s)).start()                                                else:                            gl.l.info('Неопознаное сообщение: {}'.format(msg))                                        else:                        gl.l.info('Неопознаное сообщение: {}'.format(msg))                                elif _pr == '@':                    if msg.getBody()[1:] == 'quit':                        gl.flagQuit = True                                        elif msg.getBody()[1:] == 'clear':                        gl.anomalies = {}                        gl.drones = {}                        gl.npcs = {}                        gl.actions = {}                                                main.show_screen()                                        elif msg.getBody()[1:4] == 'sas':                        status = None                                                if msg.getBody()[4:5] == 'b':                            status = 'busy'                                                elif msg.getBody()[4:5] == 'f':                            status = 'free'                                                if status:                            threading.Thread(target=main.sas, args=(msg.getBody()[6:], status)).start()                                        elif msg.getBody()[1:] == 'allfree':                        threading.Thread(target=main.all_free, args=()).start()                                        elif msg.getBody()[1:] == 'refresh':                        threading.Thread(target=main.refresh_opt, args=()).start()                                elif bool(pre.match(msg.getBody())):                    threading.Thread(target=main.sas, args=(msg.getBody(), 'free')).start()                                else:                    gl.l.info('Неопознаное сообщение: {}'.format(msg))                except Exception as e:            print 'except in ja.OnMessage: {}'.format(e)        def OnPresence(self, con, msg):        _who = msg.getFrom()        _type = msg.getType()                if _who == self.jid:            return                if _type == 'unsubscribe':            self.ja_client.Roster.Unauthorize(_who)            self.ja_client.Roster.Unsubscribe(_who)                elif _type == 'subscribe':            self.ja_client.Roster.Subscribe(_who)            self.ja_client.Roster.Authorize(_who)                elif _type == 'unavailable':            if _who.getNode() in self.contact_list:                del self.contact_list[_who.getNode()]                else:            self.contact_list[_who.getNode()] = True